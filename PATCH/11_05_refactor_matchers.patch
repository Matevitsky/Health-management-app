Index: src/test/java/ru/javawebinar/topjava/service/AbstractUserServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/service/AbstractUserServiceTest.java	(date 1470326890000)
+++ src/test/java/ru/javawebinar/topjava/service/AbstractUserServiceTest.java	(revision )
@@ -4,7 +4,6 @@
 import org.junit.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.dao.DataAccessException;
-import ru.javawebinar.topjava.UserTestData.*;
 import ru.javawebinar.topjava.model.Role;
 import ru.javawebinar.topjava.model.User;
 import ru.javawebinar.topjava.util.exception.NotFoundException;
@@ -27,15 +26,15 @@
 
     @Test
     public void testSave() throws Exception {
-        TestUser tu = new TestUser(null, "New", "new@gmail.com", "newPass", 1555, false, Collections.singleton(Role.ROLE_USER));
-        User created = service.save(tu.asUser());
-        tu.setId(created.getId());
-        MATCHER.assertCollectionEquals(Arrays.asList(ADMIN, tu, USER), service.getAll());
+        User newUser = new User(null, "New", "new@gmail.com", "newPass", 1555, false, Collections.singleton(Role.ROLE_USER));
+        User created = service.save(newUser);
+        newUser.setId(created.getId());
+        MATCHER.assertCollectionEquals(Arrays.asList(ADMIN, newUser, USER), service.getAll());
     }
 
     @Test(expected = DataAccessException.class)
     public void testDuplicateMailSave() throws Exception {
-        service.save(new TestUser("Duplicate", "user@yandex.ru", "newPass", Role.ROLE_USER).asUser());
+        service.save(new User(null, "Duplicate", "user@yandex.ru", "newPass", 1000, Role.ROLE_USER));
     }
 
     @Test
@@ -74,11 +73,11 @@
 
     @Test
     public void testUpdate() throws Exception {
-        TestUser updated = new TestUser(USER);
+        User updated = new User(USER);
         updated.setName("UpdatedName");
         updated.setCaloriesPerDay(330);
         updated.setRoles(Collections.singletonList(Role.ROLE_ADMIN));
-        service.update(updated.asUser());
+        service.update(updated);
         MATCHER.assertEquals(updated, service.get(USER_ID));
     }
 }
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/web/user/AbstractUserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/web/user/AbstractUserController.java	(date 1470326890000)
+++ src/main/java/ru/javawebinar/topjava/web/user/AbstractUserController.java	(revision )
@@ -1,12 +1,11 @@
 package ru.javawebinar.topjava.web.user;
 
-import org.springframework.beans.factory.annotation.Autowired;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.annotation.Autowired;
 import ru.javawebinar.topjava.model.User;
 import ru.javawebinar.topjava.service.UserService;
 import ru.javawebinar.topjava.to.UserTo;
-import ru.javawebinar.topjava.util.UserUtil;
 
 import java.util.List;
 
@@ -32,7 +31,7 @@
     public User create(User user) {
         user.setId(null);
         log.info("create " + user);
-        return service.save(UserUtil.prepareToSave(user));
+        return service.save(user);
     }
 
     public void delete(int id) {
@@ -43,7 +42,7 @@
     public void update(User user, int id) {
         user.setId(id);
         log.info("update " + user);
-        service.update(UserUtil.prepareToSave(user));
+        service.update(user);
     }
 
     public void update(UserTo userTo) {
Index: src/test/java/ru/javawebinar/topjava/web/user/AdminRestControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/web/user/AdminRestControllerTest.java	(date 1470326890000)
+++ src/test/java/ru/javawebinar/topjava/web/user/AdminRestControllerTest.java	(revision )
@@ -96,11 +96,11 @@
 
     @Test
     public void testCreate() throws Exception {
-        TestUser expected = new TestUser("New", "new@gmail.com", "newPass", Role.ROLE_USER, Role.ROLE_ADMIN);
+        User expected = new User(null, "New", "new@gmail.com", "newPass", 1000, Role.ROLE_USER, Role.ROLE_ADMIN);
         ResultActions action = mockMvc.perform(post(REST_URL)
                 .contentType(MediaType.APPLICATION_JSON)
                 .with(userHttpBasic(ADMIN))
-                .content(JsonUtil.writeValue(expected.asUser()))).andExpect(status().isCreated());
+                .content(JsonUtil.writeValue(expected))).andExpect(status().isCreated());
 
         User returned = MATCHER.fromJsonAction(action);
         expected.setId(returned.getId());
\ No newline at end of file
Index: src/test/java/ru/javawebinar/topjava/MealTestData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/MealTestData.java	(date 1470326890000)
+++ src/test/java/ru/javawebinar/topjava/MealTestData.java	(revision )
@@ -1,6 +1,5 @@
 package ru.javawebinar.topjava;
 
-import ru.javawebinar.topjava.TestUtil.ToStringModelMatcher;
 import ru.javawebinar.topjava.matcher.ModelMatcher;
 import ru.javawebinar.topjava.model.UserMeal;
 import ru.javawebinar.topjava.to.UserMealWithExceed;
@@ -18,8 +17,8 @@
  */
 public class MealTestData {
 
-    public static final ModelMatcher<UserMeal, String> MATCHER = new ToStringModelMatcher<>(UserMeal.class);
-    public static final ModelMatcher<UserMealWithExceed, String> MATCHER_WITH_EXCEED = new ToStringModelMatcher<>(UserMealWithExceed.class);
+    public static final ModelMatcher<UserMeal> MATCHER = new ModelMatcher<>(UserMeal.class);
+    public static final ModelMatcher<UserMealWithExceed> MATCHER_WITH_EXCEED = new ModelMatcher<>(UserMealWithExceed.class);
 
     public static final int MEAL1_ID = START_SEQ + 2;
     public static final int ADMIN_MEAL_ID = START_SEQ + 8;
Index: src/test/java/ru/javawebinar/topjava/UserTestData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/UserTestData.java	(date 1470326890000)
+++ src/test/java/ru/javawebinar/topjava/UserTestData.java	(revision )
@@ -6,11 +6,8 @@
 import ru.javawebinar.topjava.model.Role;
 import ru.javawebinar.topjava.model.User;
 import ru.javawebinar.topjava.util.PasswordUtil;
-import ru.javawebinar.topjava.util.UserUtil;
 
-import java.util.EnumSet;
 import java.util.Objects;
-import java.util.Set;
 
 import static ru.javawebinar.topjava.model.BaseEntity.START_SEQ;
 
@@ -27,62 +24,27 @@
     public static final User USER = new User(USER_ID, "User", "user@yandex.ru", "password", 2005, Role.ROLE_USER);
     public static final User ADMIN = new User(ADMIN_ID, "Admin", "admin@gmail.com", "admin", 1900, Role.ROLE_ADMIN, Role.ROLE_USER);
 
-    public static final ModelMatcher<User, TestUser> MATCHER = new ModelMatcher<>(u -> ((u instanceof TestUser) ? (TestUser) u : new TestUser(u)), User.class);
-
-    public static class TestUser extends User {
-
-        public TestUser(User u) {
-            this(u.getId(), u.getName(), u.getEmail(), u.getPassword(), u.getCaloriesPerDay(), u.isEnabled(), u.getRoles());
-        }
-
-        public TestUser(String name, String email, String password, Role role, Role... roles) {
-            this(null, name, email, password, UserUtil.DEFAULT_CALORIES_PER_DAY, true, EnumSet.of(role, roles));
-        }
-
-        public TestUser(Integer id, String name, String email, String password, int caloriesPerDay, boolean enabled, Set<Role> roles) {
-            super(id, name, email, password, caloriesPerDay, enabled, roles);
-        }
-
-        public User asUser() {
-            return UserUtil.prepareToSave(new User(this));
-        }
-
-        @Override
-        public String toString() {
-            return "User (" +
-                    "id=" + id +
-                    ", email=" + email +
-                    ", name=" + name +
-                    ", enabled=" + enabled +
-                    ", password=" + password +
-                    ", authorities=" + roles +
-                    ')';
-        }
-
-        @Override
-        public boolean equals(Object o) {
-            if (this == o) {
+    public static final ModelMatcher<User> MATCHER = new ModelMatcher<>(User.class,
+            (expected, actual) -> {
+                if (expected == actual) {
-                return true;
-            }
+                    return true;
+                }
-            if (o == null || getClass() != o.getClass()) {
-                return false;
+                boolean cmp = comparePassword(expected.getPassword(), actual.getPassword())
+                        && Objects.equals(expected.getId(), actual.getId())
+                        && Objects.equals(expected.getName(), actual.getName())
+                        && Objects.equals(expected.getEmail(), actual.getEmail())
+                        && Objects.equals(expected.getCaloriesPerDay(), actual.getCaloriesPerDay())
+                        && Objects.equals(expected.isEnabled(), actual.isEnabled())
+                        && Objects.equals(expected.getRoles(), actual.getRoles());
+                return cmp;
             }
+    );
 
-            TestUser that = (TestUser) o;
-            return comparePassword(this.password, that.password)
-                    && Objects.equals(this.id, that.id)
-                    && Objects.equals(this.name, that.name)
-                    && Objects.equals(this.email, that.email)
-                    && Objects.equals(this.caloriesPerDay, that.caloriesPerDay)
-                    && Objects.equals(this.enabled, that.enabled)
-                    && Objects.equals(this.roles, that.roles);
-        }
-    }
 
-    private static boolean comparePassword(String rawPassword, String password) {
-        if (PasswordUtil.isEncoded(rawPassword)) {
-            LOG.warn("Expected password couldn't be compared with actual");
-        } else if (!PasswordUtil.isMatch(rawPassword, password)) {
+    private static boolean comparePassword(String rawOrEncodedPassword, String password) {
+        if (PasswordUtil.isEncoded(rawOrEncodedPassword)) {
+            return rawOrEncodedPassword.equals(password);
+        } else if (!PasswordUtil.isMatch(rawOrEncodedPassword, password)) {
             LOG.error("Password " + password + " doesn't match encoded " + password);
             return false;
         }
Index: src/test/java/ru/javawebinar/topjava/matcher/ModelMatcher.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/matcher/ModelMatcher.java	(date 1470326890000)
+++ src/test/java/ru/javawebinar/topjava/matcher/ModelMatcher.java	(revision )
@@ -10,7 +10,6 @@
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
-import java.util.function.Function;
 import java.util.stream.Collectors;
 
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
@@ -20,17 +19,49 @@
  * 06.01.2015.
  *
  * @param <T> : entity
- * @param <R> : testEntity, converter result for compare
  */
-public class ModelMatcher<T, R> {
-    protected Function<T, R> entityConverter;
+public class ModelMatcher<T> {
+    public interface EntityComparator<T> {
+        boolean compare(T expected, T actual);
+    }
+
+    private static final EntityComparator DEFAULT_COMPARATOR =
+            (Object expected, Object actual) -> String.valueOf(expected).equals(String.valueOf(actual));
+
+    protected EntityComparator<T> entityComparator;
     protected Class<T> entityClass;
 
-    public ModelMatcher(Function<T, R> entityConverter, Class<T> entityClass) {
-        this.entityConverter = entityConverter;
+    public ModelMatcher(Class<T> entityClass) {
+        this(entityClass, (EntityComparator<T>) DEFAULT_COMPARATOR);
+    }
+
+    public ModelMatcher(Class<T> entityClass, EntityComparator<T> entityComparator) {
         this.entityClass = entityClass;
+        this.entityComparator = entityComparator;
     }
 
+    private static class EntityWrapper<T> {
+        private T entity;
+        private EntityComparator<T> entityComparator;
+
+        private EntityWrapper(T entity, EntityComparator<T> entityComparator) {
+            this.entity = entity;
+            this.entityComparator = entityComparator;
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            EntityWrapper<T> that = (EntityWrapper<T>) o;
+            return entity != null ? entityComparator.compare(entity, that.entity) : that.entity == null;
+        }
+
+        @Override
+        public String toString() {
+            return JsonUtil.writeValue(entity);
+        }
+    }
+
     private T fromJsonValue(String json) {
         return JsonUtil.readValue(json, entityClass);
     }
@@ -40,15 +71,15 @@
     }
 
     public void assertEquals(T expected, T actual) {
-        Assert.assertEquals(entityConverter.apply(expected), entityConverter.apply(actual));
+        Assert.assertEquals(new EntityWrapper<>(expected, entityComparator), new EntityWrapper<>(actual, entityComparator));
     }
 
     public void assertCollectionEquals(Collection<T> expected, Collection<T> actual) {
-        Assert.assertEquals(map(expected, entityConverter), map(actual, entityConverter));
+        Assert.assertEquals(map(expected), map(actual));
     }
 
-    public static <S, T> List<T> map(Collection<S> collection, Function<S, T> converter) {
-        return collection.stream().map(converter).collect(Collectors.toList());
+    public List<EntityWrapper<T>> map(Collection<T> collection) {
+        return collection.stream().map(e -> new EntityWrapper<>(e, entityComparator)).collect(Collectors.toList());
     }
 
     public ResultMatcher contentMatcher(T expect) {
@@ -56,8 +87,8 @@
                 new TestMatcher<T>(expect) {
                     @Override
                     protected boolean compare(T expected, String body) {
-                        R actualForCompare = entityConverter.apply(fromJsonValue(body));
-                        R expectedForCompare = entityConverter.apply(expected);
+                        EntityWrapper<T> expectedForCompare = new EntityWrapper<>(expected, entityComparator);
+                        EntityWrapper<T> actualForCompare = new EntityWrapper<>(fromJsonValue(body), entityComparator);
                         return expectedForCompare.equals(actualForCompare);
                     }
                 });
@@ -71,8 +102,8 @@
         return content().string(new TestMatcher<List<T>>(expected) {
             @Override
             protected boolean compare(List<T> expected, String actual) {
-                List<R> actualList = map(fromJsonValues(actual), entityConverter);
-                List<R> expectedList = map(expected, entityConverter);
+                List<EntityWrapper<T>> expectedList = map(expected);
+                List<EntityWrapper<T>> actualList = map(fromJsonValues(actual));
                 return expectedList.equals(actualList);
             }
         });
Index: src/main/java/ru/javawebinar/topjava/util/UserUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/util/UserUtil.java	(date 1470326890000)
+++ src/main/java/ru/javawebinar/topjava/util/UserUtil.java	(revision )
@@ -18,12 +18,11 @@
         return new UserTo(user.getId(), user.getName(), user.getEmail(), user.getPassword(), user.getCaloriesPerDay());
     }
 
-    public static User updateFromTo(User user, UserTo userTo) {
+    public static void updateFromTo(User user, UserTo userTo) {
         user.setName(userTo.getName());
         user.setEmail(userTo.getEmail());
         user.setCaloriesPerDay(userTo.getCaloriesPerDay());
         user.setPassword(userTo.getPassword());
-        return prepareToSave(user);
     }
 
     public static User prepareToSave(User user) {
Index: src/test/java/ru/javawebinar/topjava/web/user/ProfileRestControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/web/user/ProfileRestControllerTest.java	(date 1470326890000)
+++ src/test/java/ru/javawebinar/topjava/web/user/ProfileRestControllerTest.java	(revision )
@@ -54,6 +54,8 @@
                 .andDo(print())
                 .andExpect(status().isOk());
 
-        MATCHER.assertEquals(UserUtil.updateFromTo(new User(USER), updatedTo), userService.getByEmail("newemail@ya.ru"));
+        User expected = new User(USER);
+        UserUtil.updateFromTo(expected, updatedTo);
+        MATCHER.assertEquals(expected, userService.getByEmail("newemail@ya.ru"));
     }
 }
\ No newline at end of file
Index: src/test/java/ru/javawebinar/topjava/TestUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/TestUtil.java	(date 1470326890000)
+++ src/test/java/ru/javawebinar/topjava/TestUtil.java	(revision )
@@ -33,13 +33,4 @@
         SecurityContextHolder.getContext().setAuthentication(
                 new UsernamePasswordAuthenticationToken(user.getEmail(), user.getPassword()));
     }
-
-    /**
-     * Compare entities using toString
-     */
-    public static class ToStringModelMatcher<T> extends ModelMatcher<T, String> {
-        public ToStringModelMatcher(Class<T> entityClass) {
-            super(Object::toString, entityClass);
-        }
-    }
 }
Index: src/main/java/ru/javawebinar/topjava/service/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/service/UserServiceImpl.java	(date 1470326890000)
+++ src/main/java/ru/javawebinar/topjava/service/UserServiceImpl.java	(revision )
@@ -31,7 +31,7 @@
     @CacheEvict(value = "users", allEntries = true)
     @Override
     public User save(User user) {
-        return repository.save(user);
+        return repository.save(UserUtil.prepareToSave(user));
     }
 
     @CacheEvict(value = "users", allEntries = true)
@@ -60,7 +60,7 @@
     @CacheEvict(value = "users", allEntries = true)
     @Override
     public void update(User user) {
-        repository.save(user);
+        repository.save(UserUtil.prepareToSave(user));
     }
 
     @CacheEvict(value = "users", allEntries = true)
@@ -68,7 +68,8 @@
     @Override
     public void update(UserTo userTo) {
         User user = get(userTo.getId());
-        repository.save(UserUtil.updateFromTo(user, userTo));
+        UserUtil.updateFromTo(user, userTo);
+        repository.save(UserUtil.prepareToSave(user));
     }
 
 
