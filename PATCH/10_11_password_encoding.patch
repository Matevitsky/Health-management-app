Index: src/main/java/ru/javawebinar/topjava/util/PasswordUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/util/PasswordUtil.java	(revision )
+++ src/main/java/ru/javawebinar/topjava/util/PasswordUtil.java	(revision )
@@ -0,0 +1,39 @@
+package ru.javawebinar.topjava.util;
+
+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+import org.springframework.security.crypto.password.PasswordEncoder;
+import org.springframework.util.StringUtils;
+
+import java.util.regex.Pattern;
+
+/**
+ * GKislin
+ * 05.01.2015.
+ */
+
+public class PasswordUtil {
+    private static final Pattern BCRYPT_PATTERN = Pattern.compile("\\A\\$2a?\\$\\d\\d\\$[./0-9A-Za-z]{53}");
+    public static final PasswordEncoder PASSWORD_ENCODER = new BCryptPasswordEncoder();
+
+    public static PasswordEncoder getPasswordEncoder() {
+        return PASSWORD_ENCODER;
+    }
+
+    public static String encode(String newPassword) {
+        if (StringUtils.isEmpty(newPassword)) {
+            return null;
+        }
+        if (isEncoded(newPassword)) {
+            return newPassword;
+        }
+        return PASSWORD_ENCODER.encode(newPassword);
+    }
+
+    public static boolean isMatch(String rawPassword, String password) {
+        return PASSWORD_ENCODER.matches(rawPassword, password);
+    }
+
+    public static boolean isEncoded(String newPassword) {
+        return BCRYPT_PATTERN.matcher(newPassword).matches();
+    }
+}
Index: src/main/java/ru/javawebinar/topjava/web/user/AbstractUserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/web/user/AbstractUserController.java	(date 1470250467000)
+++ src/main/java/ru/javawebinar/topjava/web/user/AbstractUserController.java	(revision )
@@ -6,6 +6,7 @@
 import ru.javawebinar.topjava.model.User;
 import ru.javawebinar.topjava.service.UserService;
 import ru.javawebinar.topjava.to.UserTo;
+import ru.javawebinar.topjava.util.UserUtil;
 
 import java.util.List;
 
@@ -31,7 +32,7 @@
     public User create(User user) {
         user.setId(null);
         log.info("create " + user);
-        return service.save(user);
+        return service.save(UserUtil.prepareToSave(user));
     }
 
     public void delete(int id) {
@@ -42,7 +43,7 @@
     public void update(User user, int id) {
         user.setId(id);
         log.info("update " + user);
-        service.update(user);
+        service.update(UserUtil.prepareToSave(user));
     }
 
     public void update(UserTo userTo) {
Index: src/main/resources/db/populateDB.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/db/populateDB.sql	(date 1470250467000)
+++ src/main/resources/db/populateDB.sql	(revision )
@@ -3,11 +3,13 @@
 DELETE FROM users;
 ALTER SEQUENCE global_seq RESTART WITH 100000;
 
+-- password
 INSERT INTO users (name, email, password, calories_per_day)
-VALUES ('User', 'user@yandex.ru', 'password', 2005);
+VALUES ('User', 'user@yandex.ru', '$2a$10$Sh0ZD2NFrzRRJJEKEWn8l.92ROEuzlVyzB9SV1AM8fdluPR0aC1ni', 2005);
 
+-- admin
 INSERT INTO users (name, email, password, calories_per_day)
-VALUES ('Admin', 'admin@gmail.com', 'admin', 1900);
+VALUES ('Admin', 'admin@gmail.com', '$2a$10$WejOLxVuXRpOgr4IlzQJ.eT4UcukNqHlAiOVZj1P/nmc8WbpMkiju', 1900);
 
 INSERT INTO user_roles (role, user_id) VALUES
   ('ROLE_USER', 100000),
Index: src/main/resources/spring/spring-security.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/spring/spring-security.xml	(date 1470250467000)
+++ src/main/resources/spring/spring-security.xml	(revision )
@@ -30,8 +30,12 @@
         <csrf disabled="true"/>
     </http>
 
+    <beans:bean class="ru.javawebinar.topjava.util.PasswordUtil" id="passwordEncoder" factory-method="getPasswordEncoder"/>
+
     <authentication-manager>
         <authentication-provider user-service-ref="userService">
+            <password-encoder ref="passwordEncoder"/>
+
             <!--
                         <jdbc-user-service data-source-ref="dataSource"
                                            users-by-username-query="SELECT email, password, enabled FROM users WHERE email = ?"
\ No newline at end of file
Index: src/test/java/ru/javawebinar/topjava/UserTestData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/UserTestData.java	(date 1470250467000)
+++ src/test/java/ru/javawebinar/topjava/UserTestData.java	(revision )
@@ -1,8 +1,11 @@
 package ru.javawebinar.topjava;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import ru.javawebinar.topjava.matcher.ModelMatcher;
 import ru.javawebinar.topjava.model.Role;
 import ru.javawebinar.topjava.model.User;
+import ru.javawebinar.topjava.util.PasswordUtil;
 import ru.javawebinar.topjava.util.UserUtil;
 
 import java.util.EnumSet;
@@ -16,6 +19,8 @@
  * 24.09.2015.
  */
 public class UserTestData {
+    private static final Logger LOG = LoggerFactory.getLogger(UserTestData.class);
+
     public static final int USER_ID = START_SEQ;
     public static final int ADMIN_ID = START_SEQ + 1;
 
@@ -39,7 +44,7 @@
         }
 
         public User asUser() {
-            return new User(this);
+            return UserUtil.prepareToSave(new User(this));
         }
 
         @Override
@@ -64,7 +69,7 @@
             }
 
             TestUser that = (TestUser) o;
-            return Objects.equals(this.password, that.password)
+            return comparePassword(this.password, that.password)
                     && Objects.equals(this.id, that.id)
                     && Objects.equals(this.name, that.name)
                     && Objects.equals(this.email, that.email)
@@ -72,5 +77,15 @@
                     && Objects.equals(this.enabled, that.enabled)
                     && Objects.equals(this.roles, that.roles);
         }
+    }
+
+    private static boolean comparePassword(String rawPassword, String password) {
+        if (PasswordUtil.isEncoded(rawPassword)) {
+            LOG.warn("Expected password couldn't be compared with actual");
+        } else if (!PasswordUtil.isMatch(rawPassword, password)) {
+            LOG.error("Password " + password + " doesn't match encoded " + password);
+            return false;
+        }
+        return true;
     }
 }
Index: src/main/java/ru/javawebinar/topjava/util/UserUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/util/UserUtil.java	(date 1470250467000)
+++ src/main/java/ru/javawebinar/topjava/util/UserUtil.java	(revision )
@@ -20,9 +20,15 @@
 
     public static User updateFromTo(User user, UserTo userTo) {
         user.setName(userTo.getName());
-        user.setEmail(userTo.getEmail().toLowerCase());
+        user.setEmail(userTo.getEmail());
         user.setCaloriesPerDay(userTo.getCaloriesPerDay());
         user.setPassword(userTo.getPassword());
+        return prepareToSave(user);
+    }
+
+    public static User prepareToSave(User user) {
+        user.setPassword(PasswordUtil.encode(user.getPassword()));
+        user.setEmail(user.getEmail().toLowerCase());
         return user;
     }
 }
